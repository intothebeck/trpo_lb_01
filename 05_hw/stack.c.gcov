        -:    0:Source:stack.c
        -:    0:Graph:stack.gcno
        -:    0:Data:stack.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include <stdio.h>
        -:    2:#include <stdlib.h>
        -:    3:
        -:    4:#include "stack.h"
        -:    5:
       13:    6:Node* createNode(int data) {
       13:    7:    Node* newNode = (Node*)malloc(sizeof(Node));
       13:    8:    if (newNode == NULL) {
    #####:    9:        fprintf(stderr, "Memory allocation failed for new node\n");
    #####:   10:        return NULL;
        -:   11:    }
       13:   12:    newNode->data = data;
       13:   13:    newNode->next = NULL;
       13:   14:    return newNode;
        -:   15:}
        -:   16:
       16:   17:void initStack(Stack* stack) {
       16:   18:    if (stack == NULL) {
        1:   19:        fprintf(stderr, "Stack pointer is NULL\n");
        1:   20:        return;
        -:   21:    }
       15:   22:    stack->top = NULL;
        -:   23:}
        -:   24:
       17:   25:void destroyStack(Stack* stack) {
       17:   26:    if (stack == NULL) return;
        -:   27:
       16:   28:    Node* current = stack->top;
       44:   29:    while (current != NULL) {
       12:   30:        Node* tmp = current;
       12:   31:        current = current->next;
       12:   32:        free(tmp);
        -:   33:    }
       16:   34:    stack->top = NULL;
        -:   35:}
        -:   36:
       14:   37:bool push(Stack* stack, int data) {
       14:   38:    if (stack == NULL) return false;
        -:   39:
       13:   40:    Node* newNode = createNode(data);
       13:   41:    if (newNode == NULL) return false;
        -:   42:
       13:   43:    newNode->next = stack->top;
       13:   44:    stack->top = newNode;
       13:   45:    return true;
        -:   46:}
        -:   47:
        3:   48:bool pop(Stack* stack, int* data) {
        3:   49:    if (stack == NULL || stack->top == NULL) return false;
        -:   50:
        1:   51:    Node* temp = stack->top;
        1:   52:    if (data != NULL) {
        1:   53:        *data = temp->data;
        -:   54:    }
        1:   55:    stack->top = stack->top->next;
        1:   56:    free(temp);
        1:   57:    return true;
        -:   58:}
        -:   59:
        3:   60:Node* searchByValue(Stack* stack, int value) {
        3:   61:    if (stack == NULL) return NULL;
        -:   62:
        2:   63:    Node* current = stack->top;
        8:   64:    while (current != NULL) {
        5:   65:        if (current->data == value) {
        1:   66:            return current;
        -:   67:        }
        4:   68:        current = current->next;
        -:   69:    }
        1:   70:    return NULL;
        -:   71:}
        -:   72:
        3:   73:Node* searchByIndex(Stack* stack, int index) {
        3:   74:    if (stack == NULL || index < 0) return NULL;
        -:   75:
        2:   76:    Node* current = stack->top;
        2:   77:    int count = 0;
        8:   78:    while (current != NULL) {
        5:   79:        if (count == index) {
        1:   80:            return current;
        -:   81:        }
        4:   82:        count++;
        4:   83:        current = current->next;
        -:   84:    }
        1:   85:    return NULL;
        -:   86:}
        -:   87:
        1:   88:Node* getTop(const Stack* stack) {
        1:   89:    if (stack == NULL) return NULL;
        1:   90:    return stack->top;
        -:   91:}
        -:   92:
        2:   93:void traverseStack(Stack* stack) {
        2:   94:    if (stack == NULL) {
    #####:   95:        printf("Stack is NULL\n");
    #####:   96:        return;
        -:   97:    }
        -:   98:
        2:   99:    Node* current = stack->top;
        2:  100:    printf("Stack elements: ");
        6:  101:    while (current != NULL) {
        2:  102:        printf("%d ", current->data);
        2:  103:        current = current->next;
        -:  104:    }
        2:  105:    printf("\n");
        -:  106:}
        -:  107:
<<<<<<< HEAD
        6:  108:bool isEmpty(const Stack* stack) {
=======
        6:  108:bool isEmpty(Stack* stack) {
>>>>>>> main
        6:  109:    if (stack == NULL) return true;
        5:  110:    return stack->top == NULL;
        -:  111:}
